"use strict";const P=require("electron"),w=require("path"),b=require("electron-store"),{app:s,BrowserWindow:g,ipcMain:i,screen:h,desktopCapturer:z}=P;console.log("Main process starting...");console.log("__dirname:",__dirname);const c=new b({name:"visualearn-config",encryptionKey:"your-encryption-key",schema:{apiKey:{type:"string",default:""},windowPosition:{type:"object",default:{x:null,y:null}},windowSize:{type:"object",default:{width:500,height:700}}}});process.platform==="win32"&&s.disableHardwareAcceleration();s.on("window-all-closed",()=>{process.platform!=="darwin"&&s.quit()});let e=null;function p(){console.log("Creating main window...");const o=h.getPrimaryDisplay(),{width:t,height:r}=o.workAreaSize;let l=Math.min(1200,t*.8),d=Math.min(800,r*.8),a=(t-l)/2,y=(r-d)/2;const u=w.join(__dirname,"preload.js");if(console.log("Preload script path:",u),e=new g({width:l,height:d,x:a,y,frame:!1,transparent:!0,backgroundColor:"#00000000",hasShadow:!0,resizable:!0,alwaysOnTop:!0,skipTaskbar:!1,autoHideMenuBar:!0,title:"VisuaLearn",webPreferences:{preload:u,contextIsolation:!0,nodeIntegration:!1,sandbox:!1},icon:w.join(__dirname,"../assets/icon.png")}),!e){console.error("Failed to create the main window!"),s.quit();return}if(e.on("ready-to-show",()=>{console.log("Window is ready to show"),e.show(),e.webContents.openDevTools({mode:"detach"})}),e.webContents.on("did-finish-load",()=>{console.log("Finished loading the web contents, preload script should be active")}),e.webContents.on("preload-error",(n,f,m)=>{console.error(`Preload script error in ${f}:`,m)}),e.on("restore",()=>{console.log("Window restored, setting alwaysOnTop back to true"),e.setAlwaysOnTop(!0)}),e.on("focus",()=>{console.log("Window focused, ensuring alwaysOnTop is true"),e.isMinimized()||e.setAlwaysOnTop(!0)}),e.on("moved",()=>{const n=e.getPosition();n&&c.set("windowPosition",{x:n[0],y:n[1]})}),e.on("resize",()=>{const n=e.getSize();n&&c.set("windowSize",{width:n[0],height:n[1]})}),process.env.VITE_DEV_SERVER_URL)console.log("Loading dev server URL:",process.env.VITE_DEV_SERVER_URL),e.loadURL(process.env.VITE_DEV_SERVER_URL);else{const n=w.join(process.env.DIST||"dist","index.html");console.log("Loading production path:",n),e.loadFile(n)}e.on("closed",()=>{e=null}),console.log("Main window created successfully")}s.whenReady().then(()=>{console.log("App is ready, creating window..."),p(),s.on("activate",()=>{g.getAllWindows().length===0&&p()}),_(),console.log("App initialization complete")});function _(){console.log("Registering IPC handlers..."),i.handle("window:close",()=>(console.log("IPC: window:close called"),e?(e.close(),!0):!1)),i.handle("window:minimize",()=>(console.log("IPC: window:minimize called"),e?(e.setAlwaysOnTop(!1),e.minimize(),!0):!1)),i.handle("window:maximize",()=>(console.log("IPC: window:maximize called"),e?(e.isMaximized()?e.restore():e.maximize(),!0):!1)),i.handle("get-api-key",()=>{console.log("Getting API key from store");const o=c.get("apiKey");return console.log("getApiKey result:",o?"API key found":"No API key found"),o}),i.handle("save-api-key",(o,t)=>(console.log("Saving API key to store, length:",t?t.length:0),c.set("apiKey",t),console.log("saveApiKey result: true"),!0)),i.handle("capture-screenshot",async()=>{try{console.log("Capturing screenshot...");const o=new g({width:0,height:0,show:!1,webPreferences:{offscreen:!0}});await o.loadURL("about:blank");const t=h.getPrimaryDisplay(),{width:r,height:l}=t.size;console.log(`Capturing screen with dimensions: ${r}x${l}`);const a=(await o.webContents.capturePage({x:0,y:0,width:r,height:l})).toDataURL();return console.log(`Screenshot captured successfully (${a.length} bytes)`),o.destroy(),a}catch(o){throw console.error("Error capturing screenshot:",o),o}}),i.handle("ping",()=>(console.log("Electron API ping"),"pong")),console.log("IPC handlers registered successfully")}process.on("uncaughtException",o=>{console.error("Uncaught exception:",o)});
