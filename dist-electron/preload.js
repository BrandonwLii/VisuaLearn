"use strict";const{contextBridge:n,ipcRenderer:r}=require("electron");console.log("Preload script starting...");window.addEventListener("DOMContentLoaded",()=>{console.log("DOM fully loaded, exposing Electron API...")});n.exposeInMainWorld("electronAPI",{getApiKey:async()=>{try{const e=await r.invoke("get-api-key");return console.log("getApiKey result:",e?"API key found":"No API key found"),e}catch(e){throw console.error("Error in getApiKey:",e),e}},saveApiKey:async e=>{try{console.log("saveApiKey called with key length:",(e==null?void 0:e.length)||0);const o=await r.invoke("save-api-key",e);return console.log("saveApiKey result:",o),o}catch(o){throw console.error("Error in saveApiKey:",o),o}},closeWindow:async()=>{try{return await r.invoke("window:close")}catch(e){console.error("Error closing window:",e)}},minimizeWindow:async()=>{try{return await r.invoke("window:minimize")}catch(e){console.error("Error minimizing window:",e)}},maximizeWindow:async()=>{try{return await r.invoke("window:maximize")}catch(e){console.error("Error maximizing window:",e)}},captureScreenshot:async()=>{try{console.log("Preload: requesting screenshot capture");const e=await r.invoke("capture-screenshot");return console.log("Preload: screenshot capture successful"),e}catch(e){throw console.error("Preload: Error capturing screenshot:",e),e}},ping:()=>(console.log("Electron API ping"),"pong")});console.log("Preload script completed, electronAPI should be available");
